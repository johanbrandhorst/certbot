// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acmpca"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/acmpcaiface"
	"sync"
)

var (
	lockACMPCAAPIMockCreateCertificateAuthorityAuditReportRequest       sync.RWMutex
	lockACMPCAAPIMockCreateCertificateAuthorityRequest                  sync.RWMutex
	lockACMPCAAPIMockDeleteCertificateAuthorityRequest                  sync.RWMutex
	lockACMPCAAPIMockDescribeCertificateAuthorityAuditReportRequest     sync.RWMutex
	lockACMPCAAPIMockDescribeCertificateAuthorityRequest                sync.RWMutex
	lockACMPCAAPIMockGetCertificateAuthorityCertificateRequest          sync.RWMutex
	lockACMPCAAPIMockGetCertificateAuthorityCsrRequest                  sync.RWMutex
	lockACMPCAAPIMockGetCertificateRequest                              sync.RWMutex
	lockACMPCAAPIMockImportCertificateAuthorityCertificateRequest       sync.RWMutex
	lockACMPCAAPIMockIssueCertificateRequest                            sync.RWMutex
	lockACMPCAAPIMockListCertificateAuthoritiesRequest                  sync.RWMutex
	lockACMPCAAPIMockListTagsRequest                                    sync.RWMutex
	lockACMPCAAPIMockRestoreCertificateAuthorityRequest                 sync.RWMutex
	lockACMPCAAPIMockRevokeCertificateRequest                           sync.RWMutex
	lockACMPCAAPIMockTagCertificateAuthorityRequest                     sync.RWMutex
	lockACMPCAAPIMockUntagCertificateAuthorityRequest                   sync.RWMutex
	lockACMPCAAPIMockUpdateCertificateAuthorityRequest                  sync.RWMutex
	lockACMPCAAPIMockWaitUntilAuditReportCreated                        sync.RWMutex
	lockACMPCAAPIMockWaitUntilAuditReportCreatedWithContext             sync.RWMutex
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreated            sync.RWMutex
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreatedWithContext sync.RWMutex
	lockACMPCAAPIMockWaitUntilCertificateIssued                         sync.RWMutex
	lockACMPCAAPIMockWaitUntilCertificateIssuedWithContext              sync.RWMutex
)

// Ensure, that ACMPCAAPIMock does implement ACMPCAAPI.
// If this is not the case, regenerate this file with moq.
var _ acmpcaiface.ACMPCAAPI = &ACMPCAAPIMock{}

// ACMPCAAPIMock is a mock implementation of ACMPCAAPI.
//
//     func TestSomethingThatUsesACMPCAAPI(t *testing.T) {
//
//         // make and configure a mocked ACMPCAAPI
//         mockedACMPCAAPI := &ACMPCAAPIMock{
//             CreateCertificateAuthorityAuditReportRequestFunc: func(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest {
// 	               panic("mock out the CreateCertificateAuthorityAuditReportRequest method")
//             },
//             CreateCertificateAuthorityRequestFunc: func(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest {
// 	               panic("mock out the CreateCertificateAuthorityRequest method")
//             },
//             DeleteCertificateAuthorityRequestFunc: func(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest {
// 	               panic("mock out the DeleteCertificateAuthorityRequest method")
//             },
//             DescribeCertificateAuthorityAuditReportRequestFunc: func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest {
// 	               panic("mock out the DescribeCertificateAuthorityAuditReportRequest method")
//             },
//             DescribeCertificateAuthorityRequestFunc: func(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest {
// 	               panic("mock out the DescribeCertificateAuthorityRequest method")
//             },
//             GetCertificateAuthorityCertificateRequestFunc: func(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest {
// 	               panic("mock out the GetCertificateAuthorityCertificateRequest method")
//             },
//             GetCertificateAuthorityCsrRequestFunc: func(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest {
// 	               panic("mock out the GetCertificateAuthorityCsrRequest method")
//             },
//             GetCertificateRequestFunc: func(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest {
// 	               panic("mock out the GetCertificateRequest method")
//             },
//             ImportCertificateAuthorityCertificateRequestFunc: func(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest {
// 	               panic("mock out the ImportCertificateAuthorityCertificateRequest method")
//             },
//             IssueCertificateRequestFunc: func(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest {
// 	               panic("mock out the IssueCertificateRequest method")
//             },
//             ListCertificateAuthoritiesRequestFunc: func(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest {
// 	               panic("mock out the ListCertificateAuthoritiesRequest method")
//             },
//             ListTagsRequestFunc: func(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest {
// 	               panic("mock out the ListTagsRequest method")
//             },
//             RestoreCertificateAuthorityRequestFunc: func(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest {
// 	               panic("mock out the RestoreCertificateAuthorityRequest method")
//             },
//             RevokeCertificateRequestFunc: func(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest {
// 	               panic("mock out the RevokeCertificateRequest method")
//             },
//             TagCertificateAuthorityRequestFunc: func(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest {
// 	               panic("mock out the TagCertificateAuthorityRequest method")
//             },
//             UntagCertificateAuthorityRequestFunc: func(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest {
// 	               panic("mock out the UntagCertificateAuthorityRequest method")
//             },
//             UpdateCertificateAuthorityRequestFunc: func(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest {
// 	               panic("mock out the UpdateCertificateAuthorityRequest method")
//             },
//             WaitUntilAuditReportCreatedFunc: func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) error {
// 	               panic("mock out the WaitUntilAuditReportCreated method")
//             },
//             WaitUntilAuditReportCreatedWithContextFunc: func(in1 aws.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilAuditReportCreatedWithContext method")
//             },
//             WaitUntilCertificateAuthorityCSRCreatedFunc: func(in1 *acmpca.GetCertificateAuthorityCsrInput) error {
// 	               panic("mock out the WaitUntilCertificateAuthorityCSRCreated method")
//             },
//             WaitUntilCertificateAuthorityCSRCreatedWithContextFunc: func(in1 aws.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilCertificateAuthorityCSRCreatedWithContext method")
//             },
//             WaitUntilCertificateIssuedFunc: func(in1 *acmpca.GetCertificateInput) error {
// 	               panic("mock out the WaitUntilCertificateIssued method")
//             },
//             WaitUntilCertificateIssuedWithContextFunc: func(in1 aws.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilCertificateIssuedWithContext method")
//             },
//         }
//
//         // use mockedACMPCAAPI in code that requires ACMPCAAPI
//         // and then make assertions.
//
//     }
type ACMPCAAPIMock struct {
	// CreateCertificateAuthorityAuditReportRequestFunc mocks the CreateCertificateAuthorityAuditReportRequest method.
	CreateCertificateAuthorityAuditReportRequestFunc func(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest

	// CreateCertificateAuthorityRequestFunc mocks the CreateCertificateAuthorityRequest method.
	CreateCertificateAuthorityRequestFunc func(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest

	// DeleteCertificateAuthorityRequestFunc mocks the DeleteCertificateAuthorityRequest method.
	DeleteCertificateAuthorityRequestFunc func(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest

	// DescribeCertificateAuthorityAuditReportRequestFunc mocks the DescribeCertificateAuthorityAuditReportRequest method.
	DescribeCertificateAuthorityAuditReportRequestFunc func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest

	// DescribeCertificateAuthorityRequestFunc mocks the DescribeCertificateAuthorityRequest method.
	DescribeCertificateAuthorityRequestFunc func(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest

	// GetCertificateAuthorityCertificateRequestFunc mocks the GetCertificateAuthorityCertificateRequest method.
	GetCertificateAuthorityCertificateRequestFunc func(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest

	// GetCertificateAuthorityCsrRequestFunc mocks the GetCertificateAuthorityCsrRequest method.
	GetCertificateAuthorityCsrRequestFunc func(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest

	// GetCertificateRequestFunc mocks the GetCertificateRequest method.
	GetCertificateRequestFunc func(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest

	// ImportCertificateAuthorityCertificateRequestFunc mocks the ImportCertificateAuthorityCertificateRequest method.
	ImportCertificateAuthorityCertificateRequestFunc func(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest

	// IssueCertificateRequestFunc mocks the IssueCertificateRequest method.
	IssueCertificateRequestFunc func(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest

	// ListCertificateAuthoritiesRequestFunc mocks the ListCertificateAuthoritiesRequest method.
	ListCertificateAuthoritiesRequestFunc func(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest

	// ListTagsRequestFunc mocks the ListTagsRequest method.
	ListTagsRequestFunc func(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest

	// RestoreCertificateAuthorityRequestFunc mocks the RestoreCertificateAuthorityRequest method.
	RestoreCertificateAuthorityRequestFunc func(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest

	// RevokeCertificateRequestFunc mocks the RevokeCertificateRequest method.
	RevokeCertificateRequestFunc func(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest

	// TagCertificateAuthorityRequestFunc mocks the TagCertificateAuthorityRequest method.
	TagCertificateAuthorityRequestFunc func(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest

	// UntagCertificateAuthorityRequestFunc mocks the UntagCertificateAuthorityRequest method.
	UntagCertificateAuthorityRequestFunc func(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest

	// UpdateCertificateAuthorityRequestFunc mocks the UpdateCertificateAuthorityRequest method.
	UpdateCertificateAuthorityRequestFunc func(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest

	// WaitUntilAuditReportCreatedFunc mocks the WaitUntilAuditReportCreated method.
	WaitUntilAuditReportCreatedFunc func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) error

	// WaitUntilAuditReportCreatedWithContextFunc mocks the WaitUntilAuditReportCreatedWithContext method.
	WaitUntilAuditReportCreatedWithContextFunc func(in1 aws.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error

	// WaitUntilCertificateAuthorityCSRCreatedFunc mocks the WaitUntilCertificateAuthorityCSRCreated method.
	WaitUntilCertificateAuthorityCSRCreatedFunc func(in1 *acmpca.GetCertificateAuthorityCsrInput) error

	// WaitUntilCertificateAuthorityCSRCreatedWithContextFunc mocks the WaitUntilCertificateAuthorityCSRCreatedWithContext method.
	WaitUntilCertificateAuthorityCSRCreatedWithContextFunc func(in1 aws.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error

	// WaitUntilCertificateIssuedFunc mocks the WaitUntilCertificateIssued method.
	WaitUntilCertificateIssuedFunc func(in1 *acmpca.GetCertificateInput) error

	// WaitUntilCertificateIssuedWithContextFunc mocks the WaitUntilCertificateIssuedWithContext method.
	WaitUntilCertificateIssuedWithContextFunc func(in1 aws.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateCertificateAuthorityAuditReportRequest holds details about calls to the CreateCertificateAuthorityAuditReportRequest method.
		CreateCertificateAuthorityAuditReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.CreateCertificateAuthorityAuditReportInput
		}
		// CreateCertificateAuthorityRequest holds details about calls to the CreateCertificateAuthorityRequest method.
		CreateCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.CreateCertificateAuthorityInput
		}
		// DeleteCertificateAuthorityRequest holds details about calls to the DeleteCertificateAuthorityRequest method.
		DeleteCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DeleteCertificateAuthorityInput
		}
		// DescribeCertificateAuthorityAuditReportRequest holds details about calls to the DescribeCertificateAuthorityAuditReportRequest method.
		DescribeCertificateAuthorityAuditReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
		}
		// DescribeCertificateAuthorityRequest holds details about calls to the DescribeCertificateAuthorityRequest method.
		DescribeCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DescribeCertificateAuthorityInput
		}
		// GetCertificateAuthorityCertificateRequest holds details about calls to the GetCertificateAuthorityCertificateRequest method.
		GetCertificateAuthorityCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateAuthorityCertificateInput
		}
		// GetCertificateAuthorityCsrRequest holds details about calls to the GetCertificateAuthorityCsrRequest method.
		GetCertificateAuthorityCsrRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateAuthorityCsrInput
		}
		// GetCertificateRequest holds details about calls to the GetCertificateRequest method.
		GetCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateInput
		}
		// ImportCertificateAuthorityCertificateRequest holds details about calls to the ImportCertificateAuthorityCertificateRequest method.
		ImportCertificateAuthorityCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ImportCertificateAuthorityCertificateInput
		}
		// IssueCertificateRequest holds details about calls to the IssueCertificateRequest method.
		IssueCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.IssueCertificateInput
		}
		// ListCertificateAuthoritiesRequest holds details about calls to the ListCertificateAuthoritiesRequest method.
		ListCertificateAuthoritiesRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ListCertificateAuthoritiesInput
		}
		// ListTagsRequest holds details about calls to the ListTagsRequest method.
		ListTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ListTagsInput
		}
		// RestoreCertificateAuthorityRequest holds details about calls to the RestoreCertificateAuthorityRequest method.
		RestoreCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.RestoreCertificateAuthorityInput
		}
		// RevokeCertificateRequest holds details about calls to the RevokeCertificateRequest method.
		RevokeCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.RevokeCertificateInput
		}
		// TagCertificateAuthorityRequest holds details about calls to the TagCertificateAuthorityRequest method.
		TagCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.TagCertificateAuthorityInput
		}
		// UntagCertificateAuthorityRequest holds details about calls to the UntagCertificateAuthorityRequest method.
		UntagCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.UntagCertificateAuthorityInput
		}
		// UpdateCertificateAuthorityRequest holds details about calls to the UpdateCertificateAuthorityRequest method.
		UpdateCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.UpdateCertificateAuthorityInput
		}
		// WaitUntilAuditReportCreated holds details about calls to the WaitUntilAuditReportCreated method.
		WaitUntilAuditReportCreated []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
		}
		// WaitUntilAuditReportCreatedWithContext holds details about calls to the WaitUntilAuditReportCreatedWithContext method.
		WaitUntilAuditReportCreatedWithContext []struct {
			// In1 is the in1 argument value.
			In1 aws.Context
			// In2 is the in2 argument value.
			In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
		// WaitUntilCertificateAuthorityCSRCreated holds details about calls to the WaitUntilCertificateAuthorityCSRCreated method.
		WaitUntilCertificateAuthorityCSRCreated []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateAuthorityCsrInput
		}
		// WaitUntilCertificateAuthorityCSRCreatedWithContext holds details about calls to the WaitUntilCertificateAuthorityCSRCreatedWithContext method.
		WaitUntilCertificateAuthorityCSRCreatedWithContext []struct {
			// In1 is the in1 argument value.
			In1 aws.Context
			// In2 is the in2 argument value.
			In2 *acmpca.GetCertificateAuthorityCsrInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
		// WaitUntilCertificateIssued holds details about calls to the WaitUntilCertificateIssued method.
		WaitUntilCertificateIssued []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateInput
		}
		// WaitUntilCertificateIssuedWithContext holds details about calls to the WaitUntilCertificateIssuedWithContext method.
		WaitUntilCertificateIssuedWithContext []struct {
			// In1 is the in1 argument value.
			In1 aws.Context
			// In2 is the in2 argument value.
			In2 *acmpca.GetCertificateInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
	}
}

// CreateCertificateAuthorityAuditReportRequest calls CreateCertificateAuthorityAuditReportRequestFunc.
func (mock *ACMPCAAPIMock) CreateCertificateAuthorityAuditReportRequest(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest {
	if mock.CreateCertificateAuthorityAuditReportRequestFunc == nil {
		panic("ACMPCAAPIMock.CreateCertificateAuthorityAuditReportRequestFunc: method is nil but ACMPCAAPI.CreateCertificateAuthorityAuditReportRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.CreateCertificateAuthorityAuditReportInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockCreateCertificateAuthorityAuditReportRequest.Lock()
	mock.calls.CreateCertificateAuthorityAuditReportRequest = append(mock.calls.CreateCertificateAuthorityAuditReportRequest, callInfo)
	lockACMPCAAPIMockCreateCertificateAuthorityAuditReportRequest.Unlock()
	return mock.CreateCertificateAuthorityAuditReportRequestFunc(in1)
}

// CreateCertificateAuthorityAuditReportRequestCalls gets all the calls that were made to CreateCertificateAuthorityAuditReportRequest.
// Check the length with:
//     len(mockedACMPCAAPI.CreateCertificateAuthorityAuditReportRequestCalls())
func (mock *ACMPCAAPIMock) CreateCertificateAuthorityAuditReportRequestCalls() []struct {
	In1 *acmpca.CreateCertificateAuthorityAuditReportInput
} {
	var calls []struct {
		In1 *acmpca.CreateCertificateAuthorityAuditReportInput
	}
	lockACMPCAAPIMockCreateCertificateAuthorityAuditReportRequest.RLock()
	calls = mock.calls.CreateCertificateAuthorityAuditReportRequest
	lockACMPCAAPIMockCreateCertificateAuthorityAuditReportRequest.RUnlock()
	return calls
}

// CreateCertificateAuthorityRequest calls CreateCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) CreateCertificateAuthorityRequest(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest {
	if mock.CreateCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.CreateCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.CreateCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.CreateCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockCreateCertificateAuthorityRequest.Lock()
	mock.calls.CreateCertificateAuthorityRequest = append(mock.calls.CreateCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockCreateCertificateAuthorityRequest.Unlock()
	return mock.CreateCertificateAuthorityRequestFunc(in1)
}

// CreateCertificateAuthorityRequestCalls gets all the calls that were made to CreateCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.CreateCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) CreateCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.CreateCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.CreateCertificateAuthorityInput
	}
	lockACMPCAAPIMockCreateCertificateAuthorityRequest.RLock()
	calls = mock.calls.CreateCertificateAuthorityRequest
	lockACMPCAAPIMockCreateCertificateAuthorityRequest.RUnlock()
	return calls
}

// DeleteCertificateAuthorityRequest calls DeleteCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) DeleteCertificateAuthorityRequest(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest {
	if mock.DeleteCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.DeleteCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.DeleteCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DeleteCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockDeleteCertificateAuthorityRequest.Lock()
	mock.calls.DeleteCertificateAuthorityRequest = append(mock.calls.DeleteCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockDeleteCertificateAuthorityRequest.Unlock()
	return mock.DeleteCertificateAuthorityRequestFunc(in1)
}

// DeleteCertificateAuthorityRequestCalls gets all the calls that were made to DeleteCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.DeleteCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) DeleteCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.DeleteCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.DeleteCertificateAuthorityInput
	}
	lockACMPCAAPIMockDeleteCertificateAuthorityRequest.RLock()
	calls = mock.calls.DeleteCertificateAuthorityRequest
	lockACMPCAAPIMockDeleteCertificateAuthorityRequest.RUnlock()
	return calls
}

// DescribeCertificateAuthorityAuditReportRequest calls DescribeCertificateAuthorityAuditReportRequestFunc.
func (mock *ACMPCAAPIMock) DescribeCertificateAuthorityAuditReportRequest(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest {
	if mock.DescribeCertificateAuthorityAuditReportRequestFunc == nil {
		panic("ACMPCAAPIMock.DescribeCertificateAuthorityAuditReportRequestFunc: method is nil but ACMPCAAPI.DescribeCertificateAuthorityAuditReportRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockDescribeCertificateAuthorityAuditReportRequest.Lock()
	mock.calls.DescribeCertificateAuthorityAuditReportRequest = append(mock.calls.DescribeCertificateAuthorityAuditReportRequest, callInfo)
	lockACMPCAAPIMockDescribeCertificateAuthorityAuditReportRequest.Unlock()
	return mock.DescribeCertificateAuthorityAuditReportRequestFunc(in1)
}

// DescribeCertificateAuthorityAuditReportRequestCalls gets all the calls that were made to DescribeCertificateAuthorityAuditReportRequest.
// Check the length with:
//     len(mockedACMPCAAPI.DescribeCertificateAuthorityAuditReportRequestCalls())
func (mock *ACMPCAAPIMock) DescribeCertificateAuthorityAuditReportRequestCalls() []struct {
	In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
} {
	var calls []struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}
	lockACMPCAAPIMockDescribeCertificateAuthorityAuditReportRequest.RLock()
	calls = mock.calls.DescribeCertificateAuthorityAuditReportRequest
	lockACMPCAAPIMockDescribeCertificateAuthorityAuditReportRequest.RUnlock()
	return calls
}

// DescribeCertificateAuthorityRequest calls DescribeCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) DescribeCertificateAuthorityRequest(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest {
	if mock.DescribeCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.DescribeCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.DescribeCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DescribeCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockDescribeCertificateAuthorityRequest.Lock()
	mock.calls.DescribeCertificateAuthorityRequest = append(mock.calls.DescribeCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockDescribeCertificateAuthorityRequest.Unlock()
	return mock.DescribeCertificateAuthorityRequestFunc(in1)
}

// DescribeCertificateAuthorityRequestCalls gets all the calls that were made to DescribeCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.DescribeCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) DescribeCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.DescribeCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.DescribeCertificateAuthorityInput
	}
	lockACMPCAAPIMockDescribeCertificateAuthorityRequest.RLock()
	calls = mock.calls.DescribeCertificateAuthorityRequest
	lockACMPCAAPIMockDescribeCertificateAuthorityRequest.RUnlock()
	return calls
}

// GetCertificateAuthorityCertificateRequest calls GetCertificateAuthorityCertificateRequestFunc.
func (mock *ACMPCAAPIMock) GetCertificateAuthorityCertificateRequest(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest {
	if mock.GetCertificateAuthorityCertificateRequestFunc == nil {
		panic("ACMPCAAPIMock.GetCertificateAuthorityCertificateRequestFunc: method is nil but ACMPCAAPI.GetCertificateAuthorityCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateAuthorityCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockGetCertificateAuthorityCertificateRequest.Lock()
	mock.calls.GetCertificateAuthorityCertificateRequest = append(mock.calls.GetCertificateAuthorityCertificateRequest, callInfo)
	lockACMPCAAPIMockGetCertificateAuthorityCertificateRequest.Unlock()
	return mock.GetCertificateAuthorityCertificateRequestFunc(in1)
}

// GetCertificateAuthorityCertificateRequestCalls gets all the calls that were made to GetCertificateAuthorityCertificateRequest.
// Check the length with:
//     len(mockedACMPCAAPI.GetCertificateAuthorityCertificateRequestCalls())
func (mock *ACMPCAAPIMock) GetCertificateAuthorityCertificateRequestCalls() []struct {
	In1 *acmpca.GetCertificateAuthorityCertificateInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateAuthorityCertificateInput
	}
	lockACMPCAAPIMockGetCertificateAuthorityCertificateRequest.RLock()
	calls = mock.calls.GetCertificateAuthorityCertificateRequest
	lockACMPCAAPIMockGetCertificateAuthorityCertificateRequest.RUnlock()
	return calls
}

// GetCertificateAuthorityCsrRequest calls GetCertificateAuthorityCsrRequestFunc.
func (mock *ACMPCAAPIMock) GetCertificateAuthorityCsrRequest(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest {
	if mock.GetCertificateAuthorityCsrRequestFunc == nil {
		panic("ACMPCAAPIMock.GetCertificateAuthorityCsrRequestFunc: method is nil but ACMPCAAPI.GetCertificateAuthorityCsrRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockGetCertificateAuthorityCsrRequest.Lock()
	mock.calls.GetCertificateAuthorityCsrRequest = append(mock.calls.GetCertificateAuthorityCsrRequest, callInfo)
	lockACMPCAAPIMockGetCertificateAuthorityCsrRequest.Unlock()
	return mock.GetCertificateAuthorityCsrRequestFunc(in1)
}

// GetCertificateAuthorityCsrRequestCalls gets all the calls that were made to GetCertificateAuthorityCsrRequest.
// Check the length with:
//     len(mockedACMPCAAPI.GetCertificateAuthorityCsrRequestCalls())
func (mock *ACMPCAAPIMock) GetCertificateAuthorityCsrRequestCalls() []struct {
	In1 *acmpca.GetCertificateAuthorityCsrInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}
	lockACMPCAAPIMockGetCertificateAuthorityCsrRequest.RLock()
	calls = mock.calls.GetCertificateAuthorityCsrRequest
	lockACMPCAAPIMockGetCertificateAuthorityCsrRequest.RUnlock()
	return calls
}

// GetCertificateRequest calls GetCertificateRequestFunc.
func (mock *ACMPCAAPIMock) GetCertificateRequest(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest {
	if mock.GetCertificateRequestFunc == nil {
		panic("ACMPCAAPIMock.GetCertificateRequestFunc: method is nil but ACMPCAAPI.GetCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockGetCertificateRequest.Lock()
	mock.calls.GetCertificateRequest = append(mock.calls.GetCertificateRequest, callInfo)
	lockACMPCAAPIMockGetCertificateRequest.Unlock()
	return mock.GetCertificateRequestFunc(in1)
}

// GetCertificateRequestCalls gets all the calls that were made to GetCertificateRequest.
// Check the length with:
//     len(mockedACMPCAAPI.GetCertificateRequestCalls())
func (mock *ACMPCAAPIMock) GetCertificateRequestCalls() []struct {
	In1 *acmpca.GetCertificateInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateInput
	}
	lockACMPCAAPIMockGetCertificateRequest.RLock()
	calls = mock.calls.GetCertificateRequest
	lockACMPCAAPIMockGetCertificateRequest.RUnlock()
	return calls
}

// ImportCertificateAuthorityCertificateRequest calls ImportCertificateAuthorityCertificateRequestFunc.
func (mock *ACMPCAAPIMock) ImportCertificateAuthorityCertificateRequest(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest {
	if mock.ImportCertificateAuthorityCertificateRequestFunc == nil {
		panic("ACMPCAAPIMock.ImportCertificateAuthorityCertificateRequestFunc: method is nil but ACMPCAAPI.ImportCertificateAuthorityCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ImportCertificateAuthorityCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockImportCertificateAuthorityCertificateRequest.Lock()
	mock.calls.ImportCertificateAuthorityCertificateRequest = append(mock.calls.ImportCertificateAuthorityCertificateRequest, callInfo)
	lockACMPCAAPIMockImportCertificateAuthorityCertificateRequest.Unlock()
	return mock.ImportCertificateAuthorityCertificateRequestFunc(in1)
}

// ImportCertificateAuthorityCertificateRequestCalls gets all the calls that were made to ImportCertificateAuthorityCertificateRequest.
// Check the length with:
//     len(mockedACMPCAAPI.ImportCertificateAuthorityCertificateRequestCalls())
func (mock *ACMPCAAPIMock) ImportCertificateAuthorityCertificateRequestCalls() []struct {
	In1 *acmpca.ImportCertificateAuthorityCertificateInput
} {
	var calls []struct {
		In1 *acmpca.ImportCertificateAuthorityCertificateInput
	}
	lockACMPCAAPIMockImportCertificateAuthorityCertificateRequest.RLock()
	calls = mock.calls.ImportCertificateAuthorityCertificateRequest
	lockACMPCAAPIMockImportCertificateAuthorityCertificateRequest.RUnlock()
	return calls
}

// IssueCertificateRequest calls IssueCertificateRequestFunc.
func (mock *ACMPCAAPIMock) IssueCertificateRequest(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest {
	if mock.IssueCertificateRequestFunc == nil {
		panic("ACMPCAAPIMock.IssueCertificateRequestFunc: method is nil but ACMPCAAPI.IssueCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.IssueCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockIssueCertificateRequest.Lock()
	mock.calls.IssueCertificateRequest = append(mock.calls.IssueCertificateRequest, callInfo)
	lockACMPCAAPIMockIssueCertificateRequest.Unlock()
	return mock.IssueCertificateRequestFunc(in1)
}

// IssueCertificateRequestCalls gets all the calls that were made to IssueCertificateRequest.
// Check the length with:
//     len(mockedACMPCAAPI.IssueCertificateRequestCalls())
func (mock *ACMPCAAPIMock) IssueCertificateRequestCalls() []struct {
	In1 *acmpca.IssueCertificateInput
} {
	var calls []struct {
		In1 *acmpca.IssueCertificateInput
	}
	lockACMPCAAPIMockIssueCertificateRequest.RLock()
	calls = mock.calls.IssueCertificateRequest
	lockACMPCAAPIMockIssueCertificateRequest.RUnlock()
	return calls
}

// ListCertificateAuthoritiesRequest calls ListCertificateAuthoritiesRequestFunc.
func (mock *ACMPCAAPIMock) ListCertificateAuthoritiesRequest(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest {
	if mock.ListCertificateAuthoritiesRequestFunc == nil {
		panic("ACMPCAAPIMock.ListCertificateAuthoritiesRequestFunc: method is nil but ACMPCAAPI.ListCertificateAuthoritiesRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ListCertificateAuthoritiesInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockListCertificateAuthoritiesRequest.Lock()
	mock.calls.ListCertificateAuthoritiesRequest = append(mock.calls.ListCertificateAuthoritiesRequest, callInfo)
	lockACMPCAAPIMockListCertificateAuthoritiesRequest.Unlock()
	return mock.ListCertificateAuthoritiesRequestFunc(in1)
}

// ListCertificateAuthoritiesRequestCalls gets all the calls that were made to ListCertificateAuthoritiesRequest.
// Check the length with:
//     len(mockedACMPCAAPI.ListCertificateAuthoritiesRequestCalls())
func (mock *ACMPCAAPIMock) ListCertificateAuthoritiesRequestCalls() []struct {
	In1 *acmpca.ListCertificateAuthoritiesInput
} {
	var calls []struct {
		In1 *acmpca.ListCertificateAuthoritiesInput
	}
	lockACMPCAAPIMockListCertificateAuthoritiesRequest.RLock()
	calls = mock.calls.ListCertificateAuthoritiesRequest
	lockACMPCAAPIMockListCertificateAuthoritiesRequest.RUnlock()
	return calls
}

// ListTagsRequest calls ListTagsRequestFunc.
func (mock *ACMPCAAPIMock) ListTagsRequest(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest {
	if mock.ListTagsRequestFunc == nil {
		panic("ACMPCAAPIMock.ListTagsRequestFunc: method is nil but ACMPCAAPI.ListTagsRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ListTagsInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockListTagsRequest.Lock()
	mock.calls.ListTagsRequest = append(mock.calls.ListTagsRequest, callInfo)
	lockACMPCAAPIMockListTagsRequest.Unlock()
	return mock.ListTagsRequestFunc(in1)
}

// ListTagsRequestCalls gets all the calls that were made to ListTagsRequest.
// Check the length with:
//     len(mockedACMPCAAPI.ListTagsRequestCalls())
func (mock *ACMPCAAPIMock) ListTagsRequestCalls() []struct {
	In1 *acmpca.ListTagsInput
} {
	var calls []struct {
		In1 *acmpca.ListTagsInput
	}
	lockACMPCAAPIMockListTagsRequest.RLock()
	calls = mock.calls.ListTagsRequest
	lockACMPCAAPIMockListTagsRequest.RUnlock()
	return calls
}

// RestoreCertificateAuthorityRequest calls RestoreCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) RestoreCertificateAuthorityRequest(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest {
	if mock.RestoreCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.RestoreCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.RestoreCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.RestoreCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockRestoreCertificateAuthorityRequest.Lock()
	mock.calls.RestoreCertificateAuthorityRequest = append(mock.calls.RestoreCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockRestoreCertificateAuthorityRequest.Unlock()
	return mock.RestoreCertificateAuthorityRequestFunc(in1)
}

// RestoreCertificateAuthorityRequestCalls gets all the calls that were made to RestoreCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.RestoreCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) RestoreCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.RestoreCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.RestoreCertificateAuthorityInput
	}
	lockACMPCAAPIMockRestoreCertificateAuthorityRequest.RLock()
	calls = mock.calls.RestoreCertificateAuthorityRequest
	lockACMPCAAPIMockRestoreCertificateAuthorityRequest.RUnlock()
	return calls
}

// RevokeCertificateRequest calls RevokeCertificateRequestFunc.
func (mock *ACMPCAAPIMock) RevokeCertificateRequest(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest {
	if mock.RevokeCertificateRequestFunc == nil {
		panic("ACMPCAAPIMock.RevokeCertificateRequestFunc: method is nil but ACMPCAAPI.RevokeCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.RevokeCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockRevokeCertificateRequest.Lock()
	mock.calls.RevokeCertificateRequest = append(mock.calls.RevokeCertificateRequest, callInfo)
	lockACMPCAAPIMockRevokeCertificateRequest.Unlock()
	return mock.RevokeCertificateRequestFunc(in1)
}

// RevokeCertificateRequestCalls gets all the calls that were made to RevokeCertificateRequest.
// Check the length with:
//     len(mockedACMPCAAPI.RevokeCertificateRequestCalls())
func (mock *ACMPCAAPIMock) RevokeCertificateRequestCalls() []struct {
	In1 *acmpca.RevokeCertificateInput
} {
	var calls []struct {
		In1 *acmpca.RevokeCertificateInput
	}
	lockACMPCAAPIMockRevokeCertificateRequest.RLock()
	calls = mock.calls.RevokeCertificateRequest
	lockACMPCAAPIMockRevokeCertificateRequest.RUnlock()
	return calls
}

// TagCertificateAuthorityRequest calls TagCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) TagCertificateAuthorityRequest(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest {
	if mock.TagCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.TagCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.TagCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.TagCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockTagCertificateAuthorityRequest.Lock()
	mock.calls.TagCertificateAuthorityRequest = append(mock.calls.TagCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockTagCertificateAuthorityRequest.Unlock()
	return mock.TagCertificateAuthorityRequestFunc(in1)
}

// TagCertificateAuthorityRequestCalls gets all the calls that were made to TagCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.TagCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) TagCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.TagCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.TagCertificateAuthorityInput
	}
	lockACMPCAAPIMockTagCertificateAuthorityRequest.RLock()
	calls = mock.calls.TagCertificateAuthorityRequest
	lockACMPCAAPIMockTagCertificateAuthorityRequest.RUnlock()
	return calls
}

// UntagCertificateAuthorityRequest calls UntagCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) UntagCertificateAuthorityRequest(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest {
	if mock.UntagCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.UntagCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.UntagCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.UntagCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockUntagCertificateAuthorityRequest.Lock()
	mock.calls.UntagCertificateAuthorityRequest = append(mock.calls.UntagCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockUntagCertificateAuthorityRequest.Unlock()
	return mock.UntagCertificateAuthorityRequestFunc(in1)
}

// UntagCertificateAuthorityRequestCalls gets all the calls that were made to UntagCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.UntagCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) UntagCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.UntagCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.UntagCertificateAuthorityInput
	}
	lockACMPCAAPIMockUntagCertificateAuthorityRequest.RLock()
	calls = mock.calls.UntagCertificateAuthorityRequest
	lockACMPCAAPIMockUntagCertificateAuthorityRequest.RUnlock()
	return calls
}

// UpdateCertificateAuthorityRequest calls UpdateCertificateAuthorityRequestFunc.
func (mock *ACMPCAAPIMock) UpdateCertificateAuthorityRequest(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest {
	if mock.UpdateCertificateAuthorityRequestFunc == nil {
		panic("ACMPCAAPIMock.UpdateCertificateAuthorityRequestFunc: method is nil but ACMPCAAPI.UpdateCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.UpdateCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockUpdateCertificateAuthorityRequest.Lock()
	mock.calls.UpdateCertificateAuthorityRequest = append(mock.calls.UpdateCertificateAuthorityRequest, callInfo)
	lockACMPCAAPIMockUpdateCertificateAuthorityRequest.Unlock()
	return mock.UpdateCertificateAuthorityRequestFunc(in1)
}

// UpdateCertificateAuthorityRequestCalls gets all the calls that were made to UpdateCertificateAuthorityRequest.
// Check the length with:
//     len(mockedACMPCAAPI.UpdateCertificateAuthorityRequestCalls())
func (mock *ACMPCAAPIMock) UpdateCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.UpdateCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.UpdateCertificateAuthorityInput
	}
	lockACMPCAAPIMockUpdateCertificateAuthorityRequest.RLock()
	calls = mock.calls.UpdateCertificateAuthorityRequest
	lockACMPCAAPIMockUpdateCertificateAuthorityRequest.RUnlock()
	return calls
}

// WaitUntilAuditReportCreated calls WaitUntilAuditReportCreatedFunc.
func (mock *ACMPCAAPIMock) WaitUntilAuditReportCreated(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) error {
	if mock.WaitUntilAuditReportCreatedFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilAuditReportCreatedFunc: method is nil but ACMPCAAPI.WaitUntilAuditReportCreated was just called")
	}
	callInfo := struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockWaitUntilAuditReportCreated.Lock()
	mock.calls.WaitUntilAuditReportCreated = append(mock.calls.WaitUntilAuditReportCreated, callInfo)
	lockACMPCAAPIMockWaitUntilAuditReportCreated.Unlock()
	return mock.WaitUntilAuditReportCreatedFunc(in1)
}

// WaitUntilAuditReportCreatedCalls gets all the calls that were made to WaitUntilAuditReportCreated.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilAuditReportCreatedCalls())
func (mock *ACMPCAAPIMock) WaitUntilAuditReportCreatedCalls() []struct {
	In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
} {
	var calls []struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}
	lockACMPCAAPIMockWaitUntilAuditReportCreated.RLock()
	calls = mock.calls.WaitUntilAuditReportCreated
	lockACMPCAAPIMockWaitUntilAuditReportCreated.RUnlock()
	return calls
}

// WaitUntilAuditReportCreatedWithContext calls WaitUntilAuditReportCreatedWithContextFunc.
func (mock *ACMPCAAPIMock) WaitUntilAuditReportCreatedWithContext(in1 aws.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilAuditReportCreatedWithContextFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilAuditReportCreatedWithContextFunc: method is nil but ACMPCAAPI.WaitUntilAuditReportCreatedWithContext was just called")
	}
	callInfo := struct {
		In1 aws.Context
		In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockACMPCAAPIMockWaitUntilAuditReportCreatedWithContext.Lock()
	mock.calls.WaitUntilAuditReportCreatedWithContext = append(mock.calls.WaitUntilAuditReportCreatedWithContext, callInfo)
	lockACMPCAAPIMockWaitUntilAuditReportCreatedWithContext.Unlock()
	return mock.WaitUntilAuditReportCreatedWithContextFunc(in1, in2, in3...)
}

// WaitUntilAuditReportCreatedWithContextCalls gets all the calls that were made to WaitUntilAuditReportCreatedWithContext.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilAuditReportCreatedWithContextCalls())
func (mock *ACMPCAAPIMock) WaitUntilAuditReportCreatedWithContextCalls() []struct {
	In1 aws.Context
	In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 aws.Context
		In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
		In3 []aws.WaiterOption
	}
	lockACMPCAAPIMockWaitUntilAuditReportCreatedWithContext.RLock()
	calls = mock.calls.WaitUntilAuditReportCreatedWithContext
	lockACMPCAAPIMockWaitUntilAuditReportCreatedWithContext.RUnlock()
	return calls
}

// WaitUntilCertificateAuthorityCSRCreated calls WaitUntilCertificateAuthorityCSRCreatedFunc.
func (mock *ACMPCAAPIMock) WaitUntilCertificateAuthorityCSRCreated(in1 *acmpca.GetCertificateAuthorityCsrInput) error {
	if mock.WaitUntilCertificateAuthorityCSRCreatedFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilCertificateAuthorityCSRCreatedFunc: method is nil but ACMPCAAPI.WaitUntilCertificateAuthorityCSRCreated was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreated.Lock()
	mock.calls.WaitUntilCertificateAuthorityCSRCreated = append(mock.calls.WaitUntilCertificateAuthorityCSRCreated, callInfo)
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreated.Unlock()
	return mock.WaitUntilCertificateAuthorityCSRCreatedFunc(in1)
}

// WaitUntilCertificateAuthorityCSRCreatedCalls gets all the calls that were made to WaitUntilCertificateAuthorityCSRCreated.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilCertificateAuthorityCSRCreatedCalls())
func (mock *ACMPCAAPIMock) WaitUntilCertificateAuthorityCSRCreatedCalls() []struct {
	In1 *acmpca.GetCertificateAuthorityCsrInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreated.RLock()
	calls = mock.calls.WaitUntilCertificateAuthorityCSRCreated
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreated.RUnlock()
	return calls
}

// WaitUntilCertificateAuthorityCSRCreatedWithContext calls WaitUntilCertificateAuthorityCSRCreatedWithContextFunc.
func (mock *ACMPCAAPIMock) WaitUntilCertificateAuthorityCSRCreatedWithContext(in1 aws.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilCertificateAuthorityCSRCreatedWithContextFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilCertificateAuthorityCSRCreatedWithContextFunc: method is nil but ACMPCAAPI.WaitUntilCertificateAuthorityCSRCreatedWithContext was just called")
	}
	callInfo := struct {
		In1 aws.Context
		In2 *acmpca.GetCertificateAuthorityCsrInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreatedWithContext.Lock()
	mock.calls.WaitUntilCertificateAuthorityCSRCreatedWithContext = append(mock.calls.WaitUntilCertificateAuthorityCSRCreatedWithContext, callInfo)
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreatedWithContext.Unlock()
	return mock.WaitUntilCertificateAuthorityCSRCreatedWithContextFunc(in1, in2, in3...)
}

// WaitUntilCertificateAuthorityCSRCreatedWithContextCalls gets all the calls that were made to WaitUntilCertificateAuthorityCSRCreatedWithContext.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilCertificateAuthorityCSRCreatedWithContextCalls())
func (mock *ACMPCAAPIMock) WaitUntilCertificateAuthorityCSRCreatedWithContextCalls() []struct {
	In1 aws.Context
	In2 *acmpca.GetCertificateAuthorityCsrInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 aws.Context
		In2 *acmpca.GetCertificateAuthorityCsrInput
		In3 []aws.WaiterOption
	}
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreatedWithContext.RLock()
	calls = mock.calls.WaitUntilCertificateAuthorityCSRCreatedWithContext
	lockACMPCAAPIMockWaitUntilCertificateAuthorityCSRCreatedWithContext.RUnlock()
	return calls
}

// WaitUntilCertificateIssued calls WaitUntilCertificateIssuedFunc.
func (mock *ACMPCAAPIMock) WaitUntilCertificateIssued(in1 *acmpca.GetCertificateInput) error {
	if mock.WaitUntilCertificateIssuedFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilCertificateIssuedFunc: method is nil but ACMPCAAPI.WaitUntilCertificateIssued was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateInput
	}{
		In1: in1,
	}
	lockACMPCAAPIMockWaitUntilCertificateIssued.Lock()
	mock.calls.WaitUntilCertificateIssued = append(mock.calls.WaitUntilCertificateIssued, callInfo)
	lockACMPCAAPIMockWaitUntilCertificateIssued.Unlock()
	return mock.WaitUntilCertificateIssuedFunc(in1)
}

// WaitUntilCertificateIssuedCalls gets all the calls that were made to WaitUntilCertificateIssued.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilCertificateIssuedCalls())
func (mock *ACMPCAAPIMock) WaitUntilCertificateIssuedCalls() []struct {
	In1 *acmpca.GetCertificateInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateInput
	}
	lockACMPCAAPIMockWaitUntilCertificateIssued.RLock()
	calls = mock.calls.WaitUntilCertificateIssued
	lockACMPCAAPIMockWaitUntilCertificateIssued.RUnlock()
	return calls
}

// WaitUntilCertificateIssuedWithContext calls WaitUntilCertificateIssuedWithContextFunc.
func (mock *ACMPCAAPIMock) WaitUntilCertificateIssuedWithContext(in1 aws.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilCertificateIssuedWithContextFunc == nil {
		panic("ACMPCAAPIMock.WaitUntilCertificateIssuedWithContextFunc: method is nil but ACMPCAAPI.WaitUntilCertificateIssuedWithContext was just called")
	}
	callInfo := struct {
		In1 aws.Context
		In2 *acmpca.GetCertificateInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockACMPCAAPIMockWaitUntilCertificateIssuedWithContext.Lock()
	mock.calls.WaitUntilCertificateIssuedWithContext = append(mock.calls.WaitUntilCertificateIssuedWithContext, callInfo)
	lockACMPCAAPIMockWaitUntilCertificateIssuedWithContext.Unlock()
	return mock.WaitUntilCertificateIssuedWithContextFunc(in1, in2, in3...)
}

// WaitUntilCertificateIssuedWithContextCalls gets all the calls that were made to WaitUntilCertificateIssuedWithContext.
// Check the length with:
//     len(mockedACMPCAAPI.WaitUntilCertificateIssuedWithContextCalls())
func (mock *ACMPCAAPIMock) WaitUntilCertificateIssuedWithContextCalls() []struct {
	In1 aws.Context
	In2 *acmpca.GetCertificateInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 aws.Context
		In2 *acmpca.GetCertificateInput
		In3 []aws.WaiterOption
	}
	lockACMPCAAPIMockWaitUntilCertificateIssuedWithContext.RLock()
	calls = mock.calls.WaitUntilCertificateIssuedWithContext
	lockACMPCAAPIMockWaitUntilCertificateIssuedWithContext.RUnlock()
	return calls
}
