// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acmpca"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/acmpcaiface"
	"sync"
)

var (
	lockClientAPIMockCreateCertificateAuthorityAuditReportRequest   sync.RWMutex
	lockClientAPIMockCreateCertificateAuthorityRequest              sync.RWMutex
	lockClientAPIMockCreatePermissionRequest                        sync.RWMutex
	lockClientAPIMockDeleteCertificateAuthorityRequest              sync.RWMutex
	lockClientAPIMockDeletePermissionRequest                        sync.RWMutex
	lockClientAPIMockDescribeCertificateAuthorityAuditReportRequest sync.RWMutex
	lockClientAPIMockDescribeCertificateAuthorityRequest            sync.RWMutex
	lockClientAPIMockGetCertificateAuthorityCertificateRequest      sync.RWMutex
	lockClientAPIMockGetCertificateAuthorityCsrRequest              sync.RWMutex
	lockClientAPIMockGetCertificateRequest                          sync.RWMutex
	lockClientAPIMockImportCertificateAuthorityCertificateRequest   sync.RWMutex
	lockClientAPIMockIssueCertificateRequest                        sync.RWMutex
	lockClientAPIMockListCertificateAuthoritiesRequest              sync.RWMutex
	lockClientAPIMockListPermissionsRequest                         sync.RWMutex
	lockClientAPIMockListTagsRequest                                sync.RWMutex
	lockClientAPIMockRestoreCertificateAuthorityRequest             sync.RWMutex
	lockClientAPIMockRevokeCertificateRequest                       sync.RWMutex
	lockClientAPIMockTagCertificateAuthorityRequest                 sync.RWMutex
	lockClientAPIMockUntagCertificateAuthorityRequest               sync.RWMutex
	lockClientAPIMockUpdateCertificateAuthorityRequest              sync.RWMutex
	lockClientAPIMockWaitUntilAuditReportCreated                    sync.RWMutex
	lockClientAPIMockWaitUntilCertificateAuthorityCSRCreated        sync.RWMutex
	lockClientAPIMockWaitUntilCertificateIssued                     sync.RWMutex
)

// Ensure, that ClientAPIMock does implement ClientAPI.
// If this is not the case, regenerate this file with moq.
var _ acmpcaiface.ClientAPI = &ClientAPIMock{}

// ClientAPIMock is a mock implementation of ClientAPI.
//
//     func TestSomethingThatUsesClientAPI(t *testing.T) {
//
//         // make and configure a mocked ClientAPI
//         mockedClientAPI := &ClientAPIMock{
//             CreateCertificateAuthorityAuditReportRequestFunc: func(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest {
// 	               panic("mock out the CreateCertificateAuthorityAuditReportRequest method")
//             },
//             CreateCertificateAuthorityRequestFunc: func(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest {
// 	               panic("mock out the CreateCertificateAuthorityRequest method")
//             },
//             CreatePermissionRequestFunc: func(in1 *acmpca.CreatePermissionInput) acmpca.CreatePermissionRequest {
// 	               panic("mock out the CreatePermissionRequest method")
//             },
//             DeleteCertificateAuthorityRequestFunc: func(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest {
// 	               panic("mock out the DeleteCertificateAuthorityRequest method")
//             },
//             DeletePermissionRequestFunc: func(in1 *acmpca.DeletePermissionInput) acmpca.DeletePermissionRequest {
// 	               panic("mock out the DeletePermissionRequest method")
//             },
//             DescribeCertificateAuthorityAuditReportRequestFunc: func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest {
// 	               panic("mock out the DescribeCertificateAuthorityAuditReportRequest method")
//             },
//             DescribeCertificateAuthorityRequestFunc: func(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest {
// 	               panic("mock out the DescribeCertificateAuthorityRequest method")
//             },
//             GetCertificateAuthorityCertificateRequestFunc: func(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest {
// 	               panic("mock out the GetCertificateAuthorityCertificateRequest method")
//             },
//             GetCertificateAuthorityCsrRequestFunc: func(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest {
// 	               panic("mock out the GetCertificateAuthorityCsrRequest method")
//             },
//             GetCertificateRequestFunc: func(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest {
// 	               panic("mock out the GetCertificateRequest method")
//             },
//             ImportCertificateAuthorityCertificateRequestFunc: func(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest {
// 	               panic("mock out the ImportCertificateAuthorityCertificateRequest method")
//             },
//             IssueCertificateRequestFunc: func(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest {
// 	               panic("mock out the IssueCertificateRequest method")
//             },
//             ListCertificateAuthoritiesRequestFunc: func(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest {
// 	               panic("mock out the ListCertificateAuthoritiesRequest method")
//             },
//             ListPermissionsRequestFunc: func(in1 *acmpca.ListPermissionsInput) acmpca.ListPermissionsRequest {
// 	               panic("mock out the ListPermissionsRequest method")
//             },
//             ListTagsRequestFunc: func(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest {
// 	               panic("mock out the ListTagsRequest method")
//             },
//             RestoreCertificateAuthorityRequestFunc: func(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest {
// 	               panic("mock out the RestoreCertificateAuthorityRequest method")
//             },
//             RevokeCertificateRequestFunc: func(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest {
// 	               panic("mock out the RevokeCertificateRequest method")
//             },
//             TagCertificateAuthorityRequestFunc: func(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest {
// 	               panic("mock out the TagCertificateAuthorityRequest method")
//             },
//             UntagCertificateAuthorityRequestFunc: func(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest {
// 	               panic("mock out the UntagCertificateAuthorityRequest method")
//             },
//             UpdateCertificateAuthorityRequestFunc: func(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest {
// 	               panic("mock out the UpdateCertificateAuthorityRequest method")
//             },
//             WaitUntilAuditReportCreatedFunc: func(in1 context.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilAuditReportCreated method")
//             },
//             WaitUntilCertificateAuthorityCSRCreatedFunc: func(in1 context.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilCertificateAuthorityCSRCreated method")
//             },
//             WaitUntilCertificateIssuedFunc: func(in1 context.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error {
// 	               panic("mock out the WaitUntilCertificateIssued method")
//             },
//         }
//
//         // use mockedClientAPI in code that requires ClientAPI
//         // and then make assertions.
//
//     }
type ClientAPIMock struct {
	// CreateCertificateAuthorityAuditReportRequestFunc mocks the CreateCertificateAuthorityAuditReportRequest method.
	CreateCertificateAuthorityAuditReportRequestFunc func(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest

	// CreateCertificateAuthorityRequestFunc mocks the CreateCertificateAuthorityRequest method.
	CreateCertificateAuthorityRequestFunc func(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest

	// CreatePermissionRequestFunc mocks the CreatePermissionRequest method.
	CreatePermissionRequestFunc func(in1 *acmpca.CreatePermissionInput) acmpca.CreatePermissionRequest

	// DeleteCertificateAuthorityRequestFunc mocks the DeleteCertificateAuthorityRequest method.
	DeleteCertificateAuthorityRequestFunc func(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest

	// DeletePermissionRequestFunc mocks the DeletePermissionRequest method.
	DeletePermissionRequestFunc func(in1 *acmpca.DeletePermissionInput) acmpca.DeletePermissionRequest

	// DescribeCertificateAuthorityAuditReportRequestFunc mocks the DescribeCertificateAuthorityAuditReportRequest method.
	DescribeCertificateAuthorityAuditReportRequestFunc func(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest

	// DescribeCertificateAuthorityRequestFunc mocks the DescribeCertificateAuthorityRequest method.
	DescribeCertificateAuthorityRequestFunc func(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest

	// GetCertificateAuthorityCertificateRequestFunc mocks the GetCertificateAuthorityCertificateRequest method.
	GetCertificateAuthorityCertificateRequestFunc func(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest

	// GetCertificateAuthorityCsrRequestFunc mocks the GetCertificateAuthorityCsrRequest method.
	GetCertificateAuthorityCsrRequestFunc func(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest

	// GetCertificateRequestFunc mocks the GetCertificateRequest method.
	GetCertificateRequestFunc func(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest

	// ImportCertificateAuthorityCertificateRequestFunc mocks the ImportCertificateAuthorityCertificateRequest method.
	ImportCertificateAuthorityCertificateRequestFunc func(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest

	// IssueCertificateRequestFunc mocks the IssueCertificateRequest method.
	IssueCertificateRequestFunc func(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest

	// ListCertificateAuthoritiesRequestFunc mocks the ListCertificateAuthoritiesRequest method.
	ListCertificateAuthoritiesRequestFunc func(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest

	// ListPermissionsRequestFunc mocks the ListPermissionsRequest method.
	ListPermissionsRequestFunc func(in1 *acmpca.ListPermissionsInput) acmpca.ListPermissionsRequest

	// ListTagsRequestFunc mocks the ListTagsRequest method.
	ListTagsRequestFunc func(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest

	// RestoreCertificateAuthorityRequestFunc mocks the RestoreCertificateAuthorityRequest method.
	RestoreCertificateAuthorityRequestFunc func(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest

	// RevokeCertificateRequestFunc mocks the RevokeCertificateRequest method.
	RevokeCertificateRequestFunc func(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest

	// TagCertificateAuthorityRequestFunc mocks the TagCertificateAuthorityRequest method.
	TagCertificateAuthorityRequestFunc func(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest

	// UntagCertificateAuthorityRequestFunc mocks the UntagCertificateAuthorityRequest method.
	UntagCertificateAuthorityRequestFunc func(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest

	// UpdateCertificateAuthorityRequestFunc mocks the UpdateCertificateAuthorityRequest method.
	UpdateCertificateAuthorityRequestFunc func(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest

	// WaitUntilAuditReportCreatedFunc mocks the WaitUntilAuditReportCreated method.
	WaitUntilAuditReportCreatedFunc func(in1 context.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error

	// WaitUntilCertificateAuthorityCSRCreatedFunc mocks the WaitUntilCertificateAuthorityCSRCreated method.
	WaitUntilCertificateAuthorityCSRCreatedFunc func(in1 context.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error

	// WaitUntilCertificateIssuedFunc mocks the WaitUntilCertificateIssued method.
	WaitUntilCertificateIssuedFunc func(in1 context.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateCertificateAuthorityAuditReportRequest holds details about calls to the CreateCertificateAuthorityAuditReportRequest method.
		CreateCertificateAuthorityAuditReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.CreateCertificateAuthorityAuditReportInput
		}
		// CreateCertificateAuthorityRequest holds details about calls to the CreateCertificateAuthorityRequest method.
		CreateCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.CreateCertificateAuthorityInput
		}
		// CreatePermissionRequest holds details about calls to the CreatePermissionRequest method.
		CreatePermissionRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.CreatePermissionInput
		}
		// DeleteCertificateAuthorityRequest holds details about calls to the DeleteCertificateAuthorityRequest method.
		DeleteCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DeleteCertificateAuthorityInput
		}
		// DeletePermissionRequest holds details about calls to the DeletePermissionRequest method.
		DeletePermissionRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DeletePermissionInput
		}
		// DescribeCertificateAuthorityAuditReportRequest holds details about calls to the DescribeCertificateAuthorityAuditReportRequest method.
		DescribeCertificateAuthorityAuditReportRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
		}
		// DescribeCertificateAuthorityRequest holds details about calls to the DescribeCertificateAuthorityRequest method.
		DescribeCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.DescribeCertificateAuthorityInput
		}
		// GetCertificateAuthorityCertificateRequest holds details about calls to the GetCertificateAuthorityCertificateRequest method.
		GetCertificateAuthorityCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateAuthorityCertificateInput
		}
		// GetCertificateAuthorityCsrRequest holds details about calls to the GetCertificateAuthorityCsrRequest method.
		GetCertificateAuthorityCsrRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateAuthorityCsrInput
		}
		// GetCertificateRequest holds details about calls to the GetCertificateRequest method.
		GetCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.GetCertificateInput
		}
		// ImportCertificateAuthorityCertificateRequest holds details about calls to the ImportCertificateAuthorityCertificateRequest method.
		ImportCertificateAuthorityCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ImportCertificateAuthorityCertificateInput
		}
		// IssueCertificateRequest holds details about calls to the IssueCertificateRequest method.
		IssueCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.IssueCertificateInput
		}
		// ListCertificateAuthoritiesRequest holds details about calls to the ListCertificateAuthoritiesRequest method.
		ListCertificateAuthoritiesRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ListCertificateAuthoritiesInput
		}
		// ListPermissionsRequest holds details about calls to the ListPermissionsRequest method.
		ListPermissionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ListPermissionsInput
		}
		// ListTagsRequest holds details about calls to the ListTagsRequest method.
		ListTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.ListTagsInput
		}
		// RestoreCertificateAuthorityRequest holds details about calls to the RestoreCertificateAuthorityRequest method.
		RestoreCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.RestoreCertificateAuthorityInput
		}
		// RevokeCertificateRequest holds details about calls to the RevokeCertificateRequest method.
		RevokeCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.RevokeCertificateInput
		}
		// TagCertificateAuthorityRequest holds details about calls to the TagCertificateAuthorityRequest method.
		TagCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.TagCertificateAuthorityInput
		}
		// UntagCertificateAuthorityRequest holds details about calls to the UntagCertificateAuthorityRequest method.
		UntagCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.UntagCertificateAuthorityInput
		}
		// UpdateCertificateAuthorityRequest holds details about calls to the UpdateCertificateAuthorityRequest method.
		UpdateCertificateAuthorityRequest []struct {
			// In1 is the in1 argument value.
			In1 *acmpca.UpdateCertificateAuthorityInput
		}
		// WaitUntilAuditReportCreated holds details about calls to the WaitUntilAuditReportCreated method.
		WaitUntilAuditReportCreated []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
		// WaitUntilCertificateAuthorityCSRCreated holds details about calls to the WaitUntilCertificateAuthorityCSRCreated method.
		WaitUntilCertificateAuthorityCSRCreated []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *acmpca.GetCertificateAuthorityCsrInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
		// WaitUntilCertificateIssued holds details about calls to the WaitUntilCertificateIssued method.
		WaitUntilCertificateIssued []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *acmpca.GetCertificateInput
			// In3 is the in3 argument value.
			In3 []aws.WaiterOption
		}
	}
}

// CreateCertificateAuthorityAuditReportRequest calls CreateCertificateAuthorityAuditReportRequestFunc.
func (mock *ClientAPIMock) CreateCertificateAuthorityAuditReportRequest(in1 *acmpca.CreateCertificateAuthorityAuditReportInput) acmpca.CreateCertificateAuthorityAuditReportRequest {
	if mock.CreateCertificateAuthorityAuditReportRequestFunc == nil {
		panic("ClientAPIMock.CreateCertificateAuthorityAuditReportRequestFunc: method is nil but ClientAPI.CreateCertificateAuthorityAuditReportRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.CreateCertificateAuthorityAuditReportInput
	}{
		In1: in1,
	}
	lockClientAPIMockCreateCertificateAuthorityAuditReportRequest.Lock()
	mock.calls.CreateCertificateAuthorityAuditReportRequest = append(mock.calls.CreateCertificateAuthorityAuditReportRequest, callInfo)
	lockClientAPIMockCreateCertificateAuthorityAuditReportRequest.Unlock()
	return mock.CreateCertificateAuthorityAuditReportRequestFunc(in1)
}

// CreateCertificateAuthorityAuditReportRequestCalls gets all the calls that were made to CreateCertificateAuthorityAuditReportRequest.
// Check the length with:
//     len(mockedClientAPI.CreateCertificateAuthorityAuditReportRequestCalls())
func (mock *ClientAPIMock) CreateCertificateAuthorityAuditReportRequestCalls() []struct {
	In1 *acmpca.CreateCertificateAuthorityAuditReportInput
} {
	var calls []struct {
		In1 *acmpca.CreateCertificateAuthorityAuditReportInput
	}
	lockClientAPIMockCreateCertificateAuthorityAuditReportRequest.RLock()
	calls = mock.calls.CreateCertificateAuthorityAuditReportRequest
	lockClientAPIMockCreateCertificateAuthorityAuditReportRequest.RUnlock()
	return calls
}

// CreateCertificateAuthorityRequest calls CreateCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) CreateCertificateAuthorityRequest(in1 *acmpca.CreateCertificateAuthorityInput) acmpca.CreateCertificateAuthorityRequest {
	if mock.CreateCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.CreateCertificateAuthorityRequestFunc: method is nil but ClientAPI.CreateCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.CreateCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockCreateCertificateAuthorityRequest.Lock()
	mock.calls.CreateCertificateAuthorityRequest = append(mock.calls.CreateCertificateAuthorityRequest, callInfo)
	lockClientAPIMockCreateCertificateAuthorityRequest.Unlock()
	return mock.CreateCertificateAuthorityRequestFunc(in1)
}

// CreateCertificateAuthorityRequestCalls gets all the calls that were made to CreateCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.CreateCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) CreateCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.CreateCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.CreateCertificateAuthorityInput
	}
	lockClientAPIMockCreateCertificateAuthorityRequest.RLock()
	calls = mock.calls.CreateCertificateAuthorityRequest
	lockClientAPIMockCreateCertificateAuthorityRequest.RUnlock()
	return calls
}

// CreatePermissionRequest calls CreatePermissionRequestFunc.
func (mock *ClientAPIMock) CreatePermissionRequest(in1 *acmpca.CreatePermissionInput) acmpca.CreatePermissionRequest {
	if mock.CreatePermissionRequestFunc == nil {
		panic("ClientAPIMock.CreatePermissionRequestFunc: method is nil but ClientAPI.CreatePermissionRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.CreatePermissionInput
	}{
		In1: in1,
	}
	lockClientAPIMockCreatePermissionRequest.Lock()
	mock.calls.CreatePermissionRequest = append(mock.calls.CreatePermissionRequest, callInfo)
	lockClientAPIMockCreatePermissionRequest.Unlock()
	return mock.CreatePermissionRequestFunc(in1)
}

// CreatePermissionRequestCalls gets all the calls that were made to CreatePermissionRequest.
// Check the length with:
//     len(mockedClientAPI.CreatePermissionRequestCalls())
func (mock *ClientAPIMock) CreatePermissionRequestCalls() []struct {
	In1 *acmpca.CreatePermissionInput
} {
	var calls []struct {
		In1 *acmpca.CreatePermissionInput
	}
	lockClientAPIMockCreatePermissionRequest.RLock()
	calls = mock.calls.CreatePermissionRequest
	lockClientAPIMockCreatePermissionRequest.RUnlock()
	return calls
}

// DeleteCertificateAuthorityRequest calls DeleteCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) DeleteCertificateAuthorityRequest(in1 *acmpca.DeleteCertificateAuthorityInput) acmpca.DeleteCertificateAuthorityRequest {
	if mock.DeleteCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.DeleteCertificateAuthorityRequestFunc: method is nil but ClientAPI.DeleteCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DeleteCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockDeleteCertificateAuthorityRequest.Lock()
	mock.calls.DeleteCertificateAuthorityRequest = append(mock.calls.DeleteCertificateAuthorityRequest, callInfo)
	lockClientAPIMockDeleteCertificateAuthorityRequest.Unlock()
	return mock.DeleteCertificateAuthorityRequestFunc(in1)
}

// DeleteCertificateAuthorityRequestCalls gets all the calls that were made to DeleteCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.DeleteCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) DeleteCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.DeleteCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.DeleteCertificateAuthorityInput
	}
	lockClientAPIMockDeleteCertificateAuthorityRequest.RLock()
	calls = mock.calls.DeleteCertificateAuthorityRequest
	lockClientAPIMockDeleteCertificateAuthorityRequest.RUnlock()
	return calls
}

// DeletePermissionRequest calls DeletePermissionRequestFunc.
func (mock *ClientAPIMock) DeletePermissionRequest(in1 *acmpca.DeletePermissionInput) acmpca.DeletePermissionRequest {
	if mock.DeletePermissionRequestFunc == nil {
		panic("ClientAPIMock.DeletePermissionRequestFunc: method is nil but ClientAPI.DeletePermissionRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DeletePermissionInput
	}{
		In1: in1,
	}
	lockClientAPIMockDeletePermissionRequest.Lock()
	mock.calls.DeletePermissionRequest = append(mock.calls.DeletePermissionRequest, callInfo)
	lockClientAPIMockDeletePermissionRequest.Unlock()
	return mock.DeletePermissionRequestFunc(in1)
}

// DeletePermissionRequestCalls gets all the calls that were made to DeletePermissionRequest.
// Check the length with:
//     len(mockedClientAPI.DeletePermissionRequestCalls())
func (mock *ClientAPIMock) DeletePermissionRequestCalls() []struct {
	In1 *acmpca.DeletePermissionInput
} {
	var calls []struct {
		In1 *acmpca.DeletePermissionInput
	}
	lockClientAPIMockDeletePermissionRequest.RLock()
	calls = mock.calls.DeletePermissionRequest
	lockClientAPIMockDeletePermissionRequest.RUnlock()
	return calls
}

// DescribeCertificateAuthorityAuditReportRequest calls DescribeCertificateAuthorityAuditReportRequestFunc.
func (mock *ClientAPIMock) DescribeCertificateAuthorityAuditReportRequest(in1 *acmpca.DescribeCertificateAuthorityAuditReportInput) acmpca.DescribeCertificateAuthorityAuditReportRequest {
	if mock.DescribeCertificateAuthorityAuditReportRequestFunc == nil {
		panic("ClientAPIMock.DescribeCertificateAuthorityAuditReportRequestFunc: method is nil but ClientAPI.DescribeCertificateAuthorityAuditReportRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}{
		In1: in1,
	}
	lockClientAPIMockDescribeCertificateAuthorityAuditReportRequest.Lock()
	mock.calls.DescribeCertificateAuthorityAuditReportRequest = append(mock.calls.DescribeCertificateAuthorityAuditReportRequest, callInfo)
	lockClientAPIMockDescribeCertificateAuthorityAuditReportRequest.Unlock()
	return mock.DescribeCertificateAuthorityAuditReportRequestFunc(in1)
}

// DescribeCertificateAuthorityAuditReportRequestCalls gets all the calls that were made to DescribeCertificateAuthorityAuditReportRequest.
// Check the length with:
//     len(mockedClientAPI.DescribeCertificateAuthorityAuditReportRequestCalls())
func (mock *ClientAPIMock) DescribeCertificateAuthorityAuditReportRequestCalls() []struct {
	In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
} {
	var calls []struct {
		In1 *acmpca.DescribeCertificateAuthorityAuditReportInput
	}
	lockClientAPIMockDescribeCertificateAuthorityAuditReportRequest.RLock()
	calls = mock.calls.DescribeCertificateAuthorityAuditReportRequest
	lockClientAPIMockDescribeCertificateAuthorityAuditReportRequest.RUnlock()
	return calls
}

// DescribeCertificateAuthorityRequest calls DescribeCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) DescribeCertificateAuthorityRequest(in1 *acmpca.DescribeCertificateAuthorityInput) acmpca.DescribeCertificateAuthorityRequest {
	if mock.DescribeCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.DescribeCertificateAuthorityRequestFunc: method is nil but ClientAPI.DescribeCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.DescribeCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockDescribeCertificateAuthorityRequest.Lock()
	mock.calls.DescribeCertificateAuthorityRequest = append(mock.calls.DescribeCertificateAuthorityRequest, callInfo)
	lockClientAPIMockDescribeCertificateAuthorityRequest.Unlock()
	return mock.DescribeCertificateAuthorityRequestFunc(in1)
}

// DescribeCertificateAuthorityRequestCalls gets all the calls that were made to DescribeCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.DescribeCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) DescribeCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.DescribeCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.DescribeCertificateAuthorityInput
	}
	lockClientAPIMockDescribeCertificateAuthorityRequest.RLock()
	calls = mock.calls.DescribeCertificateAuthorityRequest
	lockClientAPIMockDescribeCertificateAuthorityRequest.RUnlock()
	return calls
}

// GetCertificateAuthorityCertificateRequest calls GetCertificateAuthorityCertificateRequestFunc.
func (mock *ClientAPIMock) GetCertificateAuthorityCertificateRequest(in1 *acmpca.GetCertificateAuthorityCertificateInput) acmpca.GetCertificateAuthorityCertificateRequest {
	if mock.GetCertificateAuthorityCertificateRequestFunc == nil {
		panic("ClientAPIMock.GetCertificateAuthorityCertificateRequestFunc: method is nil but ClientAPI.GetCertificateAuthorityCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateAuthorityCertificateInput
	}{
		In1: in1,
	}
	lockClientAPIMockGetCertificateAuthorityCertificateRequest.Lock()
	mock.calls.GetCertificateAuthorityCertificateRequest = append(mock.calls.GetCertificateAuthorityCertificateRequest, callInfo)
	lockClientAPIMockGetCertificateAuthorityCertificateRequest.Unlock()
	return mock.GetCertificateAuthorityCertificateRequestFunc(in1)
}

// GetCertificateAuthorityCertificateRequestCalls gets all the calls that were made to GetCertificateAuthorityCertificateRequest.
// Check the length with:
//     len(mockedClientAPI.GetCertificateAuthorityCertificateRequestCalls())
func (mock *ClientAPIMock) GetCertificateAuthorityCertificateRequestCalls() []struct {
	In1 *acmpca.GetCertificateAuthorityCertificateInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateAuthorityCertificateInput
	}
	lockClientAPIMockGetCertificateAuthorityCertificateRequest.RLock()
	calls = mock.calls.GetCertificateAuthorityCertificateRequest
	lockClientAPIMockGetCertificateAuthorityCertificateRequest.RUnlock()
	return calls
}

// GetCertificateAuthorityCsrRequest calls GetCertificateAuthorityCsrRequestFunc.
func (mock *ClientAPIMock) GetCertificateAuthorityCsrRequest(in1 *acmpca.GetCertificateAuthorityCsrInput) acmpca.GetCertificateAuthorityCsrRequest {
	if mock.GetCertificateAuthorityCsrRequestFunc == nil {
		panic("ClientAPIMock.GetCertificateAuthorityCsrRequestFunc: method is nil but ClientAPI.GetCertificateAuthorityCsrRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}{
		In1: in1,
	}
	lockClientAPIMockGetCertificateAuthorityCsrRequest.Lock()
	mock.calls.GetCertificateAuthorityCsrRequest = append(mock.calls.GetCertificateAuthorityCsrRequest, callInfo)
	lockClientAPIMockGetCertificateAuthorityCsrRequest.Unlock()
	return mock.GetCertificateAuthorityCsrRequestFunc(in1)
}

// GetCertificateAuthorityCsrRequestCalls gets all the calls that were made to GetCertificateAuthorityCsrRequest.
// Check the length with:
//     len(mockedClientAPI.GetCertificateAuthorityCsrRequestCalls())
func (mock *ClientAPIMock) GetCertificateAuthorityCsrRequestCalls() []struct {
	In1 *acmpca.GetCertificateAuthorityCsrInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateAuthorityCsrInput
	}
	lockClientAPIMockGetCertificateAuthorityCsrRequest.RLock()
	calls = mock.calls.GetCertificateAuthorityCsrRequest
	lockClientAPIMockGetCertificateAuthorityCsrRequest.RUnlock()
	return calls
}

// GetCertificateRequest calls GetCertificateRequestFunc.
func (mock *ClientAPIMock) GetCertificateRequest(in1 *acmpca.GetCertificateInput) acmpca.GetCertificateRequest {
	if mock.GetCertificateRequestFunc == nil {
		panic("ClientAPIMock.GetCertificateRequestFunc: method is nil but ClientAPI.GetCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.GetCertificateInput
	}{
		In1: in1,
	}
	lockClientAPIMockGetCertificateRequest.Lock()
	mock.calls.GetCertificateRequest = append(mock.calls.GetCertificateRequest, callInfo)
	lockClientAPIMockGetCertificateRequest.Unlock()
	return mock.GetCertificateRequestFunc(in1)
}

// GetCertificateRequestCalls gets all the calls that were made to GetCertificateRequest.
// Check the length with:
//     len(mockedClientAPI.GetCertificateRequestCalls())
func (mock *ClientAPIMock) GetCertificateRequestCalls() []struct {
	In1 *acmpca.GetCertificateInput
} {
	var calls []struct {
		In1 *acmpca.GetCertificateInput
	}
	lockClientAPIMockGetCertificateRequest.RLock()
	calls = mock.calls.GetCertificateRequest
	lockClientAPIMockGetCertificateRequest.RUnlock()
	return calls
}

// ImportCertificateAuthorityCertificateRequest calls ImportCertificateAuthorityCertificateRequestFunc.
func (mock *ClientAPIMock) ImportCertificateAuthorityCertificateRequest(in1 *acmpca.ImportCertificateAuthorityCertificateInput) acmpca.ImportCertificateAuthorityCertificateRequest {
	if mock.ImportCertificateAuthorityCertificateRequestFunc == nil {
		panic("ClientAPIMock.ImportCertificateAuthorityCertificateRequestFunc: method is nil but ClientAPI.ImportCertificateAuthorityCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ImportCertificateAuthorityCertificateInput
	}{
		In1: in1,
	}
	lockClientAPIMockImportCertificateAuthorityCertificateRequest.Lock()
	mock.calls.ImportCertificateAuthorityCertificateRequest = append(mock.calls.ImportCertificateAuthorityCertificateRequest, callInfo)
	lockClientAPIMockImportCertificateAuthorityCertificateRequest.Unlock()
	return mock.ImportCertificateAuthorityCertificateRequestFunc(in1)
}

// ImportCertificateAuthorityCertificateRequestCalls gets all the calls that were made to ImportCertificateAuthorityCertificateRequest.
// Check the length with:
//     len(mockedClientAPI.ImportCertificateAuthorityCertificateRequestCalls())
func (mock *ClientAPIMock) ImportCertificateAuthorityCertificateRequestCalls() []struct {
	In1 *acmpca.ImportCertificateAuthorityCertificateInput
} {
	var calls []struct {
		In1 *acmpca.ImportCertificateAuthorityCertificateInput
	}
	lockClientAPIMockImportCertificateAuthorityCertificateRequest.RLock()
	calls = mock.calls.ImportCertificateAuthorityCertificateRequest
	lockClientAPIMockImportCertificateAuthorityCertificateRequest.RUnlock()
	return calls
}

// IssueCertificateRequest calls IssueCertificateRequestFunc.
func (mock *ClientAPIMock) IssueCertificateRequest(in1 *acmpca.IssueCertificateInput) acmpca.IssueCertificateRequest {
	if mock.IssueCertificateRequestFunc == nil {
		panic("ClientAPIMock.IssueCertificateRequestFunc: method is nil but ClientAPI.IssueCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.IssueCertificateInput
	}{
		In1: in1,
	}
	lockClientAPIMockIssueCertificateRequest.Lock()
	mock.calls.IssueCertificateRequest = append(mock.calls.IssueCertificateRequest, callInfo)
	lockClientAPIMockIssueCertificateRequest.Unlock()
	return mock.IssueCertificateRequestFunc(in1)
}

// IssueCertificateRequestCalls gets all the calls that were made to IssueCertificateRequest.
// Check the length with:
//     len(mockedClientAPI.IssueCertificateRequestCalls())
func (mock *ClientAPIMock) IssueCertificateRequestCalls() []struct {
	In1 *acmpca.IssueCertificateInput
} {
	var calls []struct {
		In1 *acmpca.IssueCertificateInput
	}
	lockClientAPIMockIssueCertificateRequest.RLock()
	calls = mock.calls.IssueCertificateRequest
	lockClientAPIMockIssueCertificateRequest.RUnlock()
	return calls
}

// ListCertificateAuthoritiesRequest calls ListCertificateAuthoritiesRequestFunc.
func (mock *ClientAPIMock) ListCertificateAuthoritiesRequest(in1 *acmpca.ListCertificateAuthoritiesInput) acmpca.ListCertificateAuthoritiesRequest {
	if mock.ListCertificateAuthoritiesRequestFunc == nil {
		panic("ClientAPIMock.ListCertificateAuthoritiesRequestFunc: method is nil but ClientAPI.ListCertificateAuthoritiesRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ListCertificateAuthoritiesInput
	}{
		In1: in1,
	}
	lockClientAPIMockListCertificateAuthoritiesRequest.Lock()
	mock.calls.ListCertificateAuthoritiesRequest = append(mock.calls.ListCertificateAuthoritiesRequest, callInfo)
	lockClientAPIMockListCertificateAuthoritiesRequest.Unlock()
	return mock.ListCertificateAuthoritiesRequestFunc(in1)
}

// ListCertificateAuthoritiesRequestCalls gets all the calls that were made to ListCertificateAuthoritiesRequest.
// Check the length with:
//     len(mockedClientAPI.ListCertificateAuthoritiesRequestCalls())
func (mock *ClientAPIMock) ListCertificateAuthoritiesRequestCalls() []struct {
	In1 *acmpca.ListCertificateAuthoritiesInput
} {
	var calls []struct {
		In1 *acmpca.ListCertificateAuthoritiesInput
	}
	lockClientAPIMockListCertificateAuthoritiesRequest.RLock()
	calls = mock.calls.ListCertificateAuthoritiesRequest
	lockClientAPIMockListCertificateAuthoritiesRequest.RUnlock()
	return calls
}

// ListPermissionsRequest calls ListPermissionsRequestFunc.
func (mock *ClientAPIMock) ListPermissionsRequest(in1 *acmpca.ListPermissionsInput) acmpca.ListPermissionsRequest {
	if mock.ListPermissionsRequestFunc == nil {
		panic("ClientAPIMock.ListPermissionsRequestFunc: method is nil but ClientAPI.ListPermissionsRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ListPermissionsInput
	}{
		In1: in1,
	}
	lockClientAPIMockListPermissionsRequest.Lock()
	mock.calls.ListPermissionsRequest = append(mock.calls.ListPermissionsRequest, callInfo)
	lockClientAPIMockListPermissionsRequest.Unlock()
	return mock.ListPermissionsRequestFunc(in1)
}

// ListPermissionsRequestCalls gets all the calls that were made to ListPermissionsRequest.
// Check the length with:
//     len(mockedClientAPI.ListPermissionsRequestCalls())
func (mock *ClientAPIMock) ListPermissionsRequestCalls() []struct {
	In1 *acmpca.ListPermissionsInput
} {
	var calls []struct {
		In1 *acmpca.ListPermissionsInput
	}
	lockClientAPIMockListPermissionsRequest.RLock()
	calls = mock.calls.ListPermissionsRequest
	lockClientAPIMockListPermissionsRequest.RUnlock()
	return calls
}

// ListTagsRequest calls ListTagsRequestFunc.
func (mock *ClientAPIMock) ListTagsRequest(in1 *acmpca.ListTagsInput) acmpca.ListTagsRequest {
	if mock.ListTagsRequestFunc == nil {
		panic("ClientAPIMock.ListTagsRequestFunc: method is nil but ClientAPI.ListTagsRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.ListTagsInput
	}{
		In1: in1,
	}
	lockClientAPIMockListTagsRequest.Lock()
	mock.calls.ListTagsRequest = append(mock.calls.ListTagsRequest, callInfo)
	lockClientAPIMockListTagsRequest.Unlock()
	return mock.ListTagsRequestFunc(in1)
}

// ListTagsRequestCalls gets all the calls that were made to ListTagsRequest.
// Check the length with:
//     len(mockedClientAPI.ListTagsRequestCalls())
func (mock *ClientAPIMock) ListTagsRequestCalls() []struct {
	In1 *acmpca.ListTagsInput
} {
	var calls []struct {
		In1 *acmpca.ListTagsInput
	}
	lockClientAPIMockListTagsRequest.RLock()
	calls = mock.calls.ListTagsRequest
	lockClientAPIMockListTagsRequest.RUnlock()
	return calls
}

// RestoreCertificateAuthorityRequest calls RestoreCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) RestoreCertificateAuthorityRequest(in1 *acmpca.RestoreCertificateAuthorityInput) acmpca.RestoreCertificateAuthorityRequest {
	if mock.RestoreCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.RestoreCertificateAuthorityRequestFunc: method is nil but ClientAPI.RestoreCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.RestoreCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockRestoreCertificateAuthorityRequest.Lock()
	mock.calls.RestoreCertificateAuthorityRequest = append(mock.calls.RestoreCertificateAuthorityRequest, callInfo)
	lockClientAPIMockRestoreCertificateAuthorityRequest.Unlock()
	return mock.RestoreCertificateAuthorityRequestFunc(in1)
}

// RestoreCertificateAuthorityRequestCalls gets all the calls that were made to RestoreCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.RestoreCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) RestoreCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.RestoreCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.RestoreCertificateAuthorityInput
	}
	lockClientAPIMockRestoreCertificateAuthorityRequest.RLock()
	calls = mock.calls.RestoreCertificateAuthorityRequest
	lockClientAPIMockRestoreCertificateAuthorityRequest.RUnlock()
	return calls
}

// RevokeCertificateRequest calls RevokeCertificateRequestFunc.
func (mock *ClientAPIMock) RevokeCertificateRequest(in1 *acmpca.RevokeCertificateInput) acmpca.RevokeCertificateRequest {
	if mock.RevokeCertificateRequestFunc == nil {
		panic("ClientAPIMock.RevokeCertificateRequestFunc: method is nil but ClientAPI.RevokeCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.RevokeCertificateInput
	}{
		In1: in1,
	}
	lockClientAPIMockRevokeCertificateRequest.Lock()
	mock.calls.RevokeCertificateRequest = append(mock.calls.RevokeCertificateRequest, callInfo)
	lockClientAPIMockRevokeCertificateRequest.Unlock()
	return mock.RevokeCertificateRequestFunc(in1)
}

// RevokeCertificateRequestCalls gets all the calls that were made to RevokeCertificateRequest.
// Check the length with:
//     len(mockedClientAPI.RevokeCertificateRequestCalls())
func (mock *ClientAPIMock) RevokeCertificateRequestCalls() []struct {
	In1 *acmpca.RevokeCertificateInput
} {
	var calls []struct {
		In1 *acmpca.RevokeCertificateInput
	}
	lockClientAPIMockRevokeCertificateRequest.RLock()
	calls = mock.calls.RevokeCertificateRequest
	lockClientAPIMockRevokeCertificateRequest.RUnlock()
	return calls
}

// TagCertificateAuthorityRequest calls TagCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) TagCertificateAuthorityRequest(in1 *acmpca.TagCertificateAuthorityInput) acmpca.TagCertificateAuthorityRequest {
	if mock.TagCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.TagCertificateAuthorityRequestFunc: method is nil but ClientAPI.TagCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.TagCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockTagCertificateAuthorityRequest.Lock()
	mock.calls.TagCertificateAuthorityRequest = append(mock.calls.TagCertificateAuthorityRequest, callInfo)
	lockClientAPIMockTagCertificateAuthorityRequest.Unlock()
	return mock.TagCertificateAuthorityRequestFunc(in1)
}

// TagCertificateAuthorityRequestCalls gets all the calls that were made to TagCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.TagCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) TagCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.TagCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.TagCertificateAuthorityInput
	}
	lockClientAPIMockTagCertificateAuthorityRequest.RLock()
	calls = mock.calls.TagCertificateAuthorityRequest
	lockClientAPIMockTagCertificateAuthorityRequest.RUnlock()
	return calls
}

// UntagCertificateAuthorityRequest calls UntagCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) UntagCertificateAuthorityRequest(in1 *acmpca.UntagCertificateAuthorityInput) acmpca.UntagCertificateAuthorityRequest {
	if mock.UntagCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.UntagCertificateAuthorityRequestFunc: method is nil but ClientAPI.UntagCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.UntagCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockUntagCertificateAuthorityRequest.Lock()
	mock.calls.UntagCertificateAuthorityRequest = append(mock.calls.UntagCertificateAuthorityRequest, callInfo)
	lockClientAPIMockUntagCertificateAuthorityRequest.Unlock()
	return mock.UntagCertificateAuthorityRequestFunc(in1)
}

// UntagCertificateAuthorityRequestCalls gets all the calls that were made to UntagCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.UntagCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) UntagCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.UntagCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.UntagCertificateAuthorityInput
	}
	lockClientAPIMockUntagCertificateAuthorityRequest.RLock()
	calls = mock.calls.UntagCertificateAuthorityRequest
	lockClientAPIMockUntagCertificateAuthorityRequest.RUnlock()
	return calls
}

// UpdateCertificateAuthorityRequest calls UpdateCertificateAuthorityRequestFunc.
func (mock *ClientAPIMock) UpdateCertificateAuthorityRequest(in1 *acmpca.UpdateCertificateAuthorityInput) acmpca.UpdateCertificateAuthorityRequest {
	if mock.UpdateCertificateAuthorityRequestFunc == nil {
		panic("ClientAPIMock.UpdateCertificateAuthorityRequestFunc: method is nil but ClientAPI.UpdateCertificateAuthorityRequest was just called")
	}
	callInfo := struct {
		In1 *acmpca.UpdateCertificateAuthorityInput
	}{
		In1: in1,
	}
	lockClientAPIMockUpdateCertificateAuthorityRequest.Lock()
	mock.calls.UpdateCertificateAuthorityRequest = append(mock.calls.UpdateCertificateAuthorityRequest, callInfo)
	lockClientAPIMockUpdateCertificateAuthorityRequest.Unlock()
	return mock.UpdateCertificateAuthorityRequestFunc(in1)
}

// UpdateCertificateAuthorityRequestCalls gets all the calls that were made to UpdateCertificateAuthorityRequest.
// Check the length with:
//     len(mockedClientAPI.UpdateCertificateAuthorityRequestCalls())
func (mock *ClientAPIMock) UpdateCertificateAuthorityRequestCalls() []struct {
	In1 *acmpca.UpdateCertificateAuthorityInput
} {
	var calls []struct {
		In1 *acmpca.UpdateCertificateAuthorityInput
	}
	lockClientAPIMockUpdateCertificateAuthorityRequest.RLock()
	calls = mock.calls.UpdateCertificateAuthorityRequest
	lockClientAPIMockUpdateCertificateAuthorityRequest.RUnlock()
	return calls
}

// WaitUntilAuditReportCreated calls WaitUntilAuditReportCreatedFunc.
func (mock *ClientAPIMock) WaitUntilAuditReportCreated(in1 context.Context, in2 *acmpca.DescribeCertificateAuthorityAuditReportInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilAuditReportCreatedFunc == nil {
		panic("ClientAPIMock.WaitUntilAuditReportCreatedFunc: method is nil but ClientAPI.WaitUntilAuditReportCreated was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockClientAPIMockWaitUntilAuditReportCreated.Lock()
	mock.calls.WaitUntilAuditReportCreated = append(mock.calls.WaitUntilAuditReportCreated, callInfo)
	lockClientAPIMockWaitUntilAuditReportCreated.Unlock()
	return mock.WaitUntilAuditReportCreatedFunc(in1, in2, in3...)
}

// WaitUntilAuditReportCreatedCalls gets all the calls that were made to WaitUntilAuditReportCreated.
// Check the length with:
//     len(mockedClientAPI.WaitUntilAuditReportCreatedCalls())
func (mock *ClientAPIMock) WaitUntilAuditReportCreatedCalls() []struct {
	In1 context.Context
	In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *acmpca.DescribeCertificateAuthorityAuditReportInput
		In3 []aws.WaiterOption
	}
	lockClientAPIMockWaitUntilAuditReportCreated.RLock()
	calls = mock.calls.WaitUntilAuditReportCreated
	lockClientAPIMockWaitUntilAuditReportCreated.RUnlock()
	return calls
}

// WaitUntilCertificateAuthorityCSRCreated calls WaitUntilCertificateAuthorityCSRCreatedFunc.
func (mock *ClientAPIMock) WaitUntilCertificateAuthorityCSRCreated(in1 context.Context, in2 *acmpca.GetCertificateAuthorityCsrInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilCertificateAuthorityCSRCreatedFunc == nil {
		panic("ClientAPIMock.WaitUntilCertificateAuthorityCSRCreatedFunc: method is nil but ClientAPI.WaitUntilCertificateAuthorityCSRCreated was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *acmpca.GetCertificateAuthorityCsrInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockClientAPIMockWaitUntilCertificateAuthorityCSRCreated.Lock()
	mock.calls.WaitUntilCertificateAuthorityCSRCreated = append(mock.calls.WaitUntilCertificateAuthorityCSRCreated, callInfo)
	lockClientAPIMockWaitUntilCertificateAuthorityCSRCreated.Unlock()
	return mock.WaitUntilCertificateAuthorityCSRCreatedFunc(in1, in2, in3...)
}

// WaitUntilCertificateAuthorityCSRCreatedCalls gets all the calls that were made to WaitUntilCertificateAuthorityCSRCreated.
// Check the length with:
//     len(mockedClientAPI.WaitUntilCertificateAuthorityCSRCreatedCalls())
func (mock *ClientAPIMock) WaitUntilCertificateAuthorityCSRCreatedCalls() []struct {
	In1 context.Context
	In2 *acmpca.GetCertificateAuthorityCsrInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *acmpca.GetCertificateAuthorityCsrInput
		In3 []aws.WaiterOption
	}
	lockClientAPIMockWaitUntilCertificateAuthorityCSRCreated.RLock()
	calls = mock.calls.WaitUntilCertificateAuthorityCSRCreated
	lockClientAPIMockWaitUntilCertificateAuthorityCSRCreated.RUnlock()
	return calls
}

// WaitUntilCertificateIssued calls WaitUntilCertificateIssuedFunc.
func (mock *ClientAPIMock) WaitUntilCertificateIssued(in1 context.Context, in2 *acmpca.GetCertificateInput, in3 ...aws.WaiterOption) error {
	if mock.WaitUntilCertificateIssuedFunc == nil {
		panic("ClientAPIMock.WaitUntilCertificateIssuedFunc: method is nil but ClientAPI.WaitUntilCertificateIssued was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *acmpca.GetCertificateInput
		In3 []aws.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockClientAPIMockWaitUntilCertificateIssued.Lock()
	mock.calls.WaitUntilCertificateIssued = append(mock.calls.WaitUntilCertificateIssued, callInfo)
	lockClientAPIMockWaitUntilCertificateIssued.Unlock()
	return mock.WaitUntilCertificateIssuedFunc(in1, in2, in3...)
}

// WaitUntilCertificateIssuedCalls gets all the calls that were made to WaitUntilCertificateIssued.
// Check the length with:
//     len(mockedClientAPI.WaitUntilCertificateIssuedCalls())
func (mock *ClientAPIMock) WaitUntilCertificateIssuedCalls() []struct {
	In1 context.Context
	In2 *acmpca.GetCertificateInput
	In3 []aws.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *acmpca.GetCertificateInput
		In3 []aws.WaiterOption
	}
	lockClientAPIMockWaitUntilCertificateIssued.RLock()
	calls = mock.calls.WaitUntilCertificateIssued
	lockClientAPIMockWaitUntilCertificateIssued.RUnlock()
	return calls
}
